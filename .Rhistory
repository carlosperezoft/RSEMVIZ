# geom_edge_diagonal(aes(width = ..index.., alpha = ..index..), lineend = 'round') +
geom_edge_diagonal() +
scale_edge_width(range = c(0.2, 1.5)) +
geom_node_point(aes(colour = leaf)) +
coord_fixed()
ggraph(dendrogram, layout = 'dendrogram', circular = F) +
# geom_edge_diagonal(aes(width = ..index.., alpha = ..index..), lineend = 'round') +
geom_edge_diagonal() +
scale_edge_width(range = c(0.2, 1.5)) +
geom_node_point(aes(colour = leaf))
ggraph(dendrogram, 'dendrogram') + geom_edge_diagonal()
ggraph(dendrogram, 'dendrogram') + geom_edge_elbow()
ggraph(dendrogram, 'dendrogram') + geom_edge_elbow2()
ggraph(dendrogram, 'dendrogram', circular = TRUE) +
geom_edge_elbow() +
coord_fixed()
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
dendrogram
summarise(dendrogram)
summary(dendrogram)
dendroNetwork(dendrogram)
hc_data <- hclust(dist(cast_data), method = "ave")
hc_data <- hclust(dist(iris[c(1,2,3)]), method = "ave")
dendroNetwork(hc_data)
labels(hc_data)
hc_data$labels
plot(hc_data)
names(hc_data)
hc_data$order
hc_data$labels <- LETTERS(nrow(iris))
hc_data$labels <- LETTERS[nrow(iris)]
hc_data$labels
hc_data$labels <- seq(1, nrow(iris))
hc_data$labels
plot(hc_data)
dendroNetwork(hc_data)
hc_data$labels <- seq(1, nrow(iris))
hc_data <- hclust(dist(iris[c(1,2,3)]), method = "ave")
matCluster <- dist(iris[c(1,2,3)])
matCluster
x <- matrix(rnorm(100), nrow = 5)
x
dim(x)
dist(x)
shiny::runApp('inst/appweb')
dist(iris[c(1)])
iris[c(1)]
?dist
head(dist(iris[c(1)]))
x <- c(1, 2, 3)
x
dist(x)
dist(x, T, T)
dist(x, TRUE, TRUE)
dist(x, upper=TRUE, diad=TRUE)
dist(x, upper=TRUE, diag=TRUE)
?hclust
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
kmeans(iris[c(1,2)])
kmeans(iris[c(1,2)],3)
kmeans(iris[c(1,2,3)],3)
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
df=iris
m=as.matrix(cbind(df$Petal.Length, df$Petal.Width),ncol=2)
cl$size
cl=(kmeans(m,3))
cl$size
df$cluster=factor(cl$cluster)
centers=as.data.frame(cl$centers)
centers
cl=(kmeans(iris[c(1,2)],3))
cl$size
df$cluster=factor(cl$cluster)
centers=as.data.frame(cl$centers)
centers
head(iris)
cl=(kmeans(iris[c(3,4)],3))
df$cluster=factor(cl$cluster)
centers=as.data.frame(cl$centers)
centers
m
?kmeas
?kmeans
centers
df$cluster=factor(cl$cluster)
centers=as.data.frame(cl$centers)
centers
names(centers)
df=iris
m=as.matrix(cbind(df$Petal.Length, df$Petal.Width),ncol=2)
cl=(kmeans(m,3))
df$cluster=factor(cl$cluster)
centers=as.data.frame(cl$centers)
names(centers)
centers
library("ggplot2", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color=’Center’)) +
geom_point(data=centers, aes(x=V1,y=V2, color=’Center’), size=52, alpha=.3, legend=FALSE)
ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='center'), size=52, alpha=.3, legend=FALSE)
runApp('inst/appweb')
ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color="center")) +
geom_point(data=centers, aes(x=V1,y=V2, color="center"), size=52, alpha=.3, legend=FALSE)
ggplot(data=df, aes(x=Petal.Length, y=Petal.Width, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color="center")) +
geom_point(data=centers, aes(x=V1,y=V2, color="center"), size=52, alpha=.3, show.legend=FALSE)
runApp('inst/appweb')
cast_data <- iris[c(3,4)]
matriz_data <- as.matrix(cbind(cast_data[c(1,2)]),ncol=2)
kmeans_data <- kmeans(matriz_data, centers = 3)
cast_data$cluster <- factor(kmeans_data$cluster)
centers <- as.data.frame(kmeans_data$centers)
centers
centers <- names("V1", "V2")
centers <- colnames("V1", "V2")
class(centers)
colnames(centers) <- c("V1", "V2")
centers
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
install.packages("randomcoloR")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
y <- dist(iris[c(1,2)])
cl <- hclust(y)
gr <- cutree(cl,k=3)
x <- cbind(x,gr)
x
x <- iris[c(1,2)]
y <- dist(x)
cl <- hclust(y)
gr <- cutree(cl,k=3)
x <- cbind(x,gr)
head(x)
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
head(x)
library("qgraph", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
head(big5)
data(big5)
data(big5groups)
head(big5)
head(big5groups)
subgrupo <- subset(x, groups == 1)
x
subgrupo <- subset(x, gr == 1)
head(subgrupo)
rownames(subgrupo)
nrow(x)
nrow(subgrupo)
subgrupo2 <- subset(x, gr == 2)
subgrupo3 <- subset(x, gr == 3)
nrow(subgrupo2)
nrow(subgrupo3)
head(subgrupo3)
big5groups
names(big5groups)
grupos <- cbind(subgrupo, subgrupo2, subgrupo3)
data(bfi)
nrow(bfi)
nrow(big5groups)
class(big5groups)
grupos <- list(subgrupo, subgrupo2, subgrupo3)
grupos
grupos <- list(g1=subgrupo, g2=subgrupo2, g3=subgrupo3)
grupos
rownames(subgrupo)
head(subgrupo)
grupos <- list(g1=rownames(subgrupo), g2=rownames(subgrupo2), g3=rownames(subgrupo3))
grupos
which(grepl(1, x$gr))
which(grepl(2, x$gr))
grupos_list <- list(g1=which(grepl(1, x$gr)), g2=which(grepl(2, x$gr)), g3=which(grepl(3, x$gr)))
grupos_list
gr
class(gr)
colnames(gr) <- c("grupo")
which(grepl(2, gr))
which(grepl(2, x$gr))
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
which(grepl(2, gr))
big5groups
class(big5groups)
length(big5groups)
length(big5groups$Openness)
length(big5groups$Conscientiousness)
length(big5groups$Extraversion)
grupos_list
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
detach("package:qgraph", unload=TRUE)
runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
install.packages("qgraph")
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
factData <-  iris[c(1,2)]
semDendro <- as.dendrogram(hclust(dist(factData)))
igraph_base <- den_to_igraph(semDendro)
as_data_frame(igraph_base, what="edges")
as_data_frame(igraph_base, what="vertices")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
dat <- read.csv("http://asbcllc.com/blog/2015/february/cre_stream_graph_test/data/cre_transaction-data.csv")
head(dat)
year=rep(seq(1990,2016) , each=10)
head(year)
length(year)
year=rep(seq(1990,2016) , each=10)
name=rep(letters[1:10] , 27)
value=sample( seq(0,1,0.0001) , length(year))
data=data.frame(year, name, value)
head(data)
data
runApp('inst/appweb')
runApp('inst/appweb')
data=data.frame(year, name, value)
streamgraph(data, key="name", value="value", date="year" )%>%
sg_legend(show=TRUE, label="names: ")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
install.packages("streamgraph")
devtools::install_github("hrbrmstr/streamgraph")
shiny::runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
library("semviz", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
install.packages("collapsibleTree")
shiny::runApp('inst/appweb')
shiny::runApp('inst/appweb')
install.packages("parcoords")
shiny::runApp('inst/appweb')
devtools::install_github("timelyportfolio/parcoords")
library("plotly", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2", "C1", "C2"),
color = c("blue", "blue", "blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = c(0,1,0,2,3,3),
target = c(2,3,3,4,4,5),
value =  c(8,4,2,8,4,2)
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
links=data.frame(source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"), target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"), value=c(2,3, 2, 3, 1, 3))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
nodes
links
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes$name,
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = links$IDsource,
target = links$IDtarget,
value =  links$value
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
nodes
cat(nodes)
print(nodes)
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
links
class(links)
linksTest = data.frame(source=links$source, target=links$target, value=(links$value*10))
linksTest
nodes=data.frame(name=c(as.character(linksTest$source), as.character(linksTest$target)) %>% unique())
nodes
linksTest = data.frame(source=links$source, target=links$target, value=(links$value*10))
summary(linksTest)
linksTest = data.frame(src=links$source, tar=links$target, val=(links$value*10))
linksTest
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
MHmakeRandomString <- function(n=1, lenght=12)
{
randomString <- c(1:n)                  # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(c(0:9, letters, LETTERS),
lenght, replace=TRUE),
collapse="")
}
return(randomString)
}
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(10,2)
MHmakeRandomString(10,4)
sha1("admin")
hasCode("admin")
hashCode("admin")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
