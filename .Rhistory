}
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(1,2)
MHmakeRandomString(10,2)
MHmakeRandomString(10,4)
sha1("admin")
hasCode("admin")
hashCode("admin")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
library("rAmCharts", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
data(data_stock_3)
head(data_stock_3)
class(data_stock_3)
class(data_stock_2)
data(data_stock_2)
class(data_stock_2)
head(data_stock_2)
runApp('inst/appweb')
class(data_stock_2)
head(data_stock_2)
desc(data_stock_2)
runApp('inst/appweb')
runApp('inst/appweb')
head(data_stock_2)
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt(paste0(2000 + row_number(), '-01-01 00:00:00')))
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt(paste0(2000, '-01-01 00:00:00')))
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt(paste0(2000+1, '-01-01 00:00:00')))
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt('2000-01-01 00:00:00'))
mydate = as.POSIXlt('2005-4-19 7:01:00')
mydate
mydate = as.POSIXlt('2005-1-1 0:00:00')
mydate
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt('2000-1-1 00:00:00'))
cast_dat <- data_stock_2  %>%
mutate(date = as.POSIXlt('2000-1-1 0:00:00'))
mydate = as.POSIXlt('2000-1-1 0:00:00')
head(data_stock_3)
mydate = as.POSIXlt('2000-1-1 0:00:00')
cast_dat <- data_stock_2  %>%
mutate(date = '2000-01-01 00:00:00')
cast_dat
cast_dat <- data_stock_2  %>%
mutate(date = paste0(row_number()+2000,'-01-01 00:00:00'))
head(cast_dat)
head(data_stock_2)
runApp('inst/appweb')
runApp('inst/appweb')
mutate(date = paste0(row_number()+2000,'-01-01 00:00:00'))
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
mutate(date = paste0(row_number()+2000,'-01-01 00:00:00'))
colnames(cast_dat)
colnames(cast_dat)[, -1]
colnames(cast_dat)[-1]
runApp('inst/appweb')
runApp('inst/appweb')
cast_dat <- data_stock_2  %>%
mutate(date = paste0(row_number()+2000,'-01-01 00:00:00'))
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
devtools::load_all(".")
shiny::runApp('inst/appweb')
runApp('inst/appweb')
library("dygraphs", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
dygraph(mdeaths) %>%
dyBarChart()
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
dygraph(mdeaths) %>%
dyStackedBarChart()
dygraph(mdeaths) %>%
dyShadow()
dygraph(mdeaths) %>%
dyFilledLIne()
dygraph(mdeaths) %>%
dyFilledLine()
dygraph(mdeaths) %>%
dyStackerRibbonGroup()
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
library("ggraph", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
require(igraph)
gr <- make_tree(20, 4, 'out')
E(gr)$class <- sample(letters[1:3], gsize(gr), replace = TRUE)
V(gr)$class <- sample(letters[1:3], gorder(gr), replace = TRUE)
ggraph(gr, 'igraph', algorithm = 'tree') +
geom_edge_diagonal(aes(alpha = ..index..))
ggraph(gr, 'igraph', algorithm = 'tree') +
geom_edge_diagonal2(aes(colour = node.class))
ggraph(gr, 'igraph', algorithm = 'tree') +
geom_edge_diagonal0(aes(colour = class))
gr <- graph_from_data_frame(flare$edges, vertices = flare$vertices)
ggraph(gr, 'treemap', weight = 'size') + geom_node_tile()
# We can color by modifying the graph
gr <- tree_apply(gr, function(node, parent, depth, tree) {
if (depth == 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$shortName[node])
} else if (depth > 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$Class[parent])
}
tree
})
ggraph(gr, 'treemap', weight = 'size') +
geom_node_tile(aes(fill = Class, filter = leaf, alpha = depth), colour = NA) +
geom_node_tile(aes(size = depth), colour = 'white') +
scale_alpha(range = c(1, 0.5), guide = 'none') +
scale_size(range = c(4, 0.2), guide = 'none')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
ggraph(gr, 'treemap', weight = 'size') +
geom_node_tile(aes(fill = Class, filter = leaf, alpha = depth), colour = NA) +
geom_node_tile(aes(size = depth), colour = 'white') +
scale_alpha(range = c(1, 0.5), guide = 'none') +
scale_size(range = c(4, 0.2), guide = 'none')
shiny::runApp('inst/appweb')
d1 = iris[c(1,2)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
d2 = iris[c(3,4)] %>% dist() %>% hclust( method="complete" ) %>% as.dendrogram()
# Custom these kendo, and place them in a list
dl <- dendlist(
d1 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3),
d2 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3)
)
iris[c(1,2)] %>% select(mpg, cyl, disp) %>% dist() %>% hclust() %>% as.dendrogram() -> dend
# Plot
par(mar=c(7,3,1,1))  # Increase bottom margin to have the complete label
plot(dend)
iris[c(1,2)] %>% dist() %>% hclust() %>% as.dendrogram() -> dend
par(mar=c(7,3,1,1))  # Increase bottom margin to have the complete label
plot(dend)
install.packages("dendextend")
iris[c(1,2)] %>% dist() %>% hclust() %>% as.dendrogram() -> dend
library("dendextend", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
library("dendextend", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
iris[c(1,2)] %>% dist() %>% hclust() %>% as.dendrogram() -> dend
par(mar=c(7,3,1,1))  # Increase bottom margin to have the complete label
plot(dend)
# Left:
dend %>%
# Custom branches
set("branches_col", "grey") %>% set("branches_lwd", 3) %>%
# Custom labels
set("labels_col", "orange") %>% set("labels_cex", 0.8) %>%
plot()
# About nodes: you can choose to display all nodes, or just leaf nodes:
dend %>% set("nodes_pch", 19)  %>% set("nodes_cex", 0.7) %>% set("nodes_col", "orange") %>% plot()
dend %>% set("leaves_pch", 19)  %>% set("leaves_cex", 0.7) %>% set("leaves_col", "skyblue") %>% plot()
par(mar=c(1,1,1,7))
dend %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3) %>%
plot(horiz=TRUE, axes=FALSE)
abline(v = 350, lty = 2)
# Highlight a cluster with rectangle
par(mar=c(9,1,1,1))
dend %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3) %>%
plot(axes=FALSE)
dend %>% rect.dendrogram(k=3, lty = 5, lwd = 0, x=1, col=rgb(0.1, 0.2, 0.4, 0.1)) %>% plot()
d1 = iris[c(1,2)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
d2 = iris[c(3,4)] %>% dist() %>% hclust( method="complete" ) %>% as.dendrogram()
# Custom these kendo, and place them in a list
dl <- dendlist(
d1 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3),
d2 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3)
)
tanglegram(dl,
common_subtrees_color_lines = FALSE, highlight_distinct_edges  = TRUE, highlight_branches_lwd=FALSE,
margin_inner=7,
lwd=2
)
d1 = iris[c(1,2)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
d2 = iris[c(3,4)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
dl <- dendlist(
d1 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3),
d2 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3)
)
tanglegram(dl,
common_subtrees_color_lines = FALSE, highlight_distinct_edges  = TRUE, highlight_branches_lwd=FALSE,
margin_inner=7,
lwd=2
)
d1 = iris[c(1)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
d2 = iris[c(2)] %>% dist() %>% hclust( method="average" ) %>% as.dendrogram()
# Custom these kendo, and place them in a list
dl <- dendlist(
d1 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3),
d2 %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_lty", 1) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3)
)
tanglegram(dl,
common_subtrees_color_lines = FALSE, highlight_distinct_edges  = TRUE, highlight_branches_lwd=FALSE,
margin_inner=7,
lwd=2
)
par(mar=c(1,1,1,7))
dend %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3) %>%
plot(horiz=TRUE, axes=FALSE)
abline(v = 350, lty = 2)
par(mar=c(1,1,1,7))
dend %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3) %>%
plot(horiz=TRUE, axes=T)
abline(v = 350, lty = 2)
par(mar=c(1,1,1,7))
dend %>%
set("labels_col", value = c("skyblue", "orange", "grey"), k=3) %>%
set("branches_k_color", value = c("skyblue", "orange", "grey"), k = 3) %>%
plot(horiz=F, axes=T)
abline(v = 350, lty = 2)
dend <- click_rotate(dend)
dend <- click_rotate(dend, continue = TRUE)
shiny::runApp('inst/appweb')
dend <- iris[1:30,-5] %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=3) %>% set("branches_lwd", c(1.5,1,1.5)) %>%
set("branches_lty", c(1,1,3,1,1,2)) %>%
set("labels_colors") %>% set("labels_cex", c(.9,1.2))
plot(dend)
ggd1 <- as.ggdend(dend)
library(ggplot2)
ggplot(ggd1) # reproducing
labels(dend) <- paste0(labels(dend), "00000")
ggd1 <- as.ggdend(dend)
# Use ylim to deal with long labels in ggplot2
ggplot(ggd1) + ylim(-.4, max(get_branches_heights(dend)) )
ggplot(ggd1, horiz = TRUE) # horiz plot in ggplot2
#
ggplot(ggd1) + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
#
ggplot(ggd1, labels = FALSE) + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
iris[3, "Species"]
runApp('inst/appweb')
runApp('inst/appweb')
LETTERS[1:3][3]
runApp('inst/appweb')
sample(LETTERS[1:3], 1)
sample(LETTERS[1:3], 1)
sample(LETTERS[1:3], 1)
sample(LETTERS[1:3], 1)
sample(LETTERS[1:3], 1)
sample(LETTERS[1:3], 1)
LETTERS[1:3][3]
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
rows_picking <- c(1:5, 25:30)
dend <- (iris[rows_picking,-5]*10) %>% dist %>% hclust %>% as.dendrogram
odd_numbers <- rows_picking %% 2
cols <- c("gold", "grey")[odd_numbers+1]
plot(dend)
colored_bars(cols, dend)
k2 <- cutree(dend, k = 2)
cols2 <- c("#0082CE", "#CC476B")[k2]
plot(dend)
k2 <- cutree(dend, k = 2)
cols2 <- c("#0082CE", "#CC476B")[k2]
plot(dend)
colored_bars(cbind(cols2, cols), dend,
rowLabels = c("2 clusters", "Odd numbers"))
cols2
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
library("dendextend", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
rows_picking <- c(1:5, 25:30)
dend <- (iris[rows_picking,-5]*10) %>% dist %>% hclust %>% as.dendrogram
odd_numbers <- rows_picking %% 2
cols <- c("red", "white")[odd_numbers+1]
plot(dend)
colored_dots(cols, dend)
plot(dend)
colored_dots(cols, dend, y_shift = -1,
rowLabels = "Odd\n numbers")
shiny::runApp('inst/appweb')
install.packages("ggdendro")
dend <- USArrests[1:10,] %>% dist %>% hclust %>% as.dendrogram
par(mfrow =c(1,2), mar = rep(6,4))
plot_horiz.dendrogram(dend, side=FALSE)
plot(dend)
plot_horiz.dendrogram(dend, side=TRUE)
plot_horiz.dendrogram(dend, side=TRUE, dLeaf=0, xlim = c(100,-10)) # bad
plot_horiz.dendrogram(dend, side=TRUE, text_offset = 0)
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
par(mfrow = c(1,3))
dend %>% plot(main = "Original")
dend %>% ladderize(TRUE) %>% plot(main = "Right (default)")
dend %>% ladderize(FALSE) %>% plot(main = "Left (rev of right)")
runApp('inst/appweb')
runApp('inst/appweb')
set.seed(23235)
ss <- sample(1:150, 10 )
dend1 <- iris[ss,-5] %>% dist %>% hclust("com") %>% as.dendrogram
dend2 <- iris[ss,-5] %>% dist %>% hclust("sin") %>% as.dendrogram
dend12 <- dendlist(dend1, dend2)
dend12 %>% tanglegram
untangle(dend1, dend2, method="random", R = 5) %>% tanglegram
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
install.packages("ape")
cl
plot(as.phylo(lc), type = "unrooted", cex = 0.6,
no.margin = TRUE)
library("ape", lib.loc="C:/PEREZOFT_DLLO/R_STAT_343/library")
plot(as.phylo(lc), type = "unrooted", cex = 0.6,
no.margin = TRUE)
plot(as.phylo(cl), type = "unrooted", cex = 0.6,
no.margin = TRUE)
plot(as.phylo(cl), type = "unrooted", cex = 0.6,
no.margin = F)
plot(as.phylo(cl), type = "unrooted", cex = 1.6,
no.margin = T)
plot(as.phylo(cl), type = "unrooted", cex = .2,
no.margin = T)
detach("package:ape", unload=TRUE)
runApp('inst/appweb')
runApp('inst/appweb')
dend <- iris[1:40,-5] %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=3) %>% set("branches_lwd", c(5,2,1.5)) %>%
set("branches_lty", c(1,1,3,1,1,2)) %>%
set("labels_colors") %>% set("labels_cex", c(.9,1.2)) %>%
set("nodes_pch", 19) %>% set("nodes_col", c("orange", "black", "plum", NA))
circlize_dendrogram(dend)
circlize_dendrogram(dend, facing = "inside", labels = FALSE)
circlize_dendrogram(dend, facing = "inside", labels = T)
circos.initialize("foo", xlim = c(0, 40))
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.rect(1:40-0.8, rep(0, 40), 1:40-0.2, runif(40), col = rand_color(40), border = NA)
}, bg.border = NA)
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.text(1:40-0.5, rep(0, 40), labels(dend), col = labels_colors(dend),
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA, track.height = 0.1)
max_height = attr(dend, "height")
circos.track(ylim = c(0, max_height), panel.fun = function(x, y) {
circos.dendrogram(dend, max_height = max_height)
}, track.height = 0.5, bg.border = NA)
circos.clear()
circlize_dendrogram(dend)
runApp('inst/appweb')
install.packages("Rcpp")
install.packages("circlepackeR")
devtools::install_github("jeromefroe/circlepackeR")
devtools::install_github("jeromefroe/circlepackeR")
install.packages("yaml")
install.packages("yaml")
devtools::install_github("jeromefroe/circlepackeR")
devtools::install_github("jeromefroe/circlepackeR")
install.packages("ggplot2")
devtools::install_github("jeromefroe/circlepackeR")
shiny::runApp('inst/appweb')
runApp('inst/appweb')
shiny::runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
data("flare")
head(flare)
runApp('inst/appweb')
runApp('inst/appweb')
data(acme)
head(acme)
head(acme)
acme
x <- ToDataFrameNetwork(acme, "p", "cost", direction = "climb")
x
xN <- FromDataFrameNetwork(x)
print(xN, "p", "cost")
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
runApp('inst/appweb')
